package com.ymj.volatiledemo;

/**
 * @author Yemingjie
 * @version 1.0
 * @date 2021/2/22 16:40
 *
 * volatile 禁止指令重排
 * 阻止编译时和运行时的指令重排。编译时JVM编译器遵循内存屏障的约束，运行时依靠CPU屏障指令来阻止重排。
 *
 * 计算机在执行程序时,为了提高性能,编译器在编译Java代码的时候和处理器执行JVM字节码的时候常常会做指令重排,一把分为以下3中
 * 1.单线程环境里面确保程序最终执行结果和代码顺序执行的结果一致.
 * 2.处理器在进行重新排序是必须要考虑指令之间的数据依赖性
 * 如果两个操作访问同一个变量，且这两个操作中有一个为写操作，此时这两个操作之间就存在数据依赖性。
 * 3.多线程环境中线程交替执行,由于编译器优化重排的存在,两个线程使用的变量能否保持一致性是无法确定的,结果无法预测
 *
 *
 * 为什么能禁止指令重排
 *      内存屏障也称为内存栅栏或栅栏指令，是一种屏障指令，它使CPU或编译器对屏障指令之前和之后发出的内存操作执行一个排序约束。
 *      这通常意味着在屏障之前发布的操作被保证在屏障之后发布的操作之前执行
 */
public class VolatileUnSort {
    int a=0;
    boolean flag=false;
    public void method1() {
        a=1;           //语句1
        flag = true;   //语句2

    }
    public void method2() {
        if(flag){
            a=a+5;
            System.out.println("value"+"="+a);
        }
    }
}
