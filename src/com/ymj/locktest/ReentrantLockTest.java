package com.ymj.locktest;

/**
 * @author Yemingjie
 * @version 1.0
 * @date 2021/2/22 17:11
 *
 * 公平锁
 *     是指多个线程按照申请锁的顺序来获取锁类似排队打饭 先来后到
 * 非公平锁
 *     是指在多线程获取锁的顺序并不是按照申请锁的顺序,有可能后申请的线程比先申请的线程优先获取到锁,在高并发的情况下,有可能造成优先级反转或者饥饿现象
 * 并发包ReentrantLock的创建可以指定构造函数的boolean类型来得到公平锁或者非公平锁 默认是非公平锁
 *
 * 可重入锁(也叫做递归锁)
 * 指的是同一线程外层函数获得锁之后，内层递归函数仍然能获取该锁的代码，在同一个线程在外层方法获取锁的时候，
 * 在进入内层方法会自动获取锁.也即是说，线程可以进入任何一个它已经拥有的锁所同步着的代码块。
 *
 * Reentrantlock/synchronized就是一个典型的可重入锁，最大作用是避免死锁
 */
public class ReentrantLockTest {
}
